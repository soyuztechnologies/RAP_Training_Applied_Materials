1. Travel Root View
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Travel Root of by RAP BO'
define root view entity ZLAM_AB_TRAVEL as select from /dmo/travel_m

--Composition child for travel viz booking
composition[0..*] of ZLAM_AB_BOOKING as _Booking 
--associations - lose coupling to get dependent data
association[1] to /DMO/I_Agency as _Agency on 
    $projection.AgencyId = _Agency.AgencyID
association[1] to /DMO/I_Customer as _Customer on
    $projection.CustomerId = _Customer.CustomerID
association[1] to I_Currency as _Currency on
    $projection.CurrencyCode = _Currency.Currency
association[1..1] to /DMO/I_Overall_Status_VH as _OverallStatus on
    $projection.OverallStatus = _OverallStatus.OverallStatus
{
    key travel_id as TravelId,
    agency_id as AgencyId,
    customer_id as CustomerId,
    begin_date as BeginDate,
    end_date as EndDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    booking_fee as BookingFee,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    total_price as TotalPrice,
    currency_code as CurrencyCode,
    description as Description,
    overall_status as OverallStatus,
    @Semantics.user.createdBy: true
    created_by as CreatedBy,
    @Semantics.systemDateTime.createdAt: true
    created_at as CreatedAt,
    @Semantics.user.lastChangedBy: true
    last_changed_by as LastChangedBy,
    @Semantics.systemDateTime.lastChangedAt: true
    //Local ETag Field --> Odata Etag
    last_changed_at as LastChangedAt,
    case overall_status
        when 'O' then 'Open'
        when 'A' then 'Approved'
        when 'R' then 'Rejected'
        when 'X' then 'Cancelled'
        end as StatusText,
    case overall_status
        when 'O' then 2
        when 'A' then 3
        when 'R' then 1
        when 'X' then 1
        end as Criticality,
    /*Expose associations*/
    _Booking,
    _Agency,
    _Customer,
    _Currency,
    _OverallStatus
}

----------------------------------------
2. Booking Entity

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Booking as child entity'
define view entity ZLAM_AB_BOOKING as select from /dmo/booking_m
composition[0..*] of ZLAM_AB_BOOKSUPPL as _BookingSupplement
association to parent ZLAM_AB_TRAVEL as _Travel on
    $projection.TravelId = _Travel.TravelId
association[1..1] to /DMO/I_Customer as _Customer on
    $projection.CustomerId = _Customer.CustomerID
association[1..1] to /DMO/I_Carrier as _Carrier on
    $projection.CarrierId = _Carrier.AirlineID
association[1..1] to /DMO/I_Connection as _Connection on
    $projection.CarrierId = _Connection.AirlineID and
    $projection.ConnectionId = _Connection.ConnectionID
association[1..1] to /DMO/I_Booking_Status_VH as _BookingStatus on
    $projection.BookingStatus = _BookingStatus.BookingStatus    
{
    key travel_id as TravelId,
    key booking_id as BookingId,
    booking_date as BookingDate,
    customer_id as CustomerId,
    carrier_id as CarrierId,
    connection_id as ConnectionId,
    flight_date as FlightDate,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    flight_price as FlightPrice,
    currency_code as CurrencyCode,
    booking_status as BookingStatus,
    @Semantics.systemDateTime.lastChangedAt: true
    last_changed_at as LastChangedAt,
    /*Expose associations*/
    _Customer,
    _Carrier,
    _Connection,
    _BookingStatus,
    _Travel,
    _BookingSupplement
}


----------------------------------------
3. booking Supplement Entity

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Booking Supplements as child of comp tree'
define view entity ZLAM_AB_BOOKSUPPL as select from /dmo/booksuppl_m
association to parent ZLAM_AB_BOOKING as _Booking on
    $projection.BookingId = _Booking.BookingId and
    $projection.TravelId = _Booking.TravelId
association[1..1] to ZLAM_AB_TRAVEL as _Travel on
    $projection.TravelId = _Travel.TravelId
association[1..1] to /DMO/I_Supplement as _Product on
    $projection.SupplementId = _Product.SupplementID
association[1..*] to /DMO/I_SupplementText as _SupplementText on
    $projection.SupplementId = _SupplementText.SupplementID   
    
{
    key travel_id as TravelId,
    key booking_id as BookingId,
    key booking_supplement_id as BookingSupplementId,
    supplement_id as SupplementId,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    price as Price,
    currency_code as CurrencyCode,
    @Semantics.systemDateTime.lastChangedAt: true
    last_changed_at as LastChangedAt,
    _Travel,
    _Product,
    _SupplementText,
    _Booking
}


----------------------------------------
4. Travel processor root entity

@EndUserText.label: 'My Travel processor projection'
@AccessControl.authorizationCheck: #NOT_REQUIRED
@Metadata.allowExtensions: true
define root view entity ZLAM_AB_TRAVEL_PROCESSOR as projection on ZLAM_AB_TRAVEL
{
    @ObjectModel.text.element: [ 'Description' ]
    key TravelId,
    @ObjectModel.text.element: [ 'AgencyName' ]
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Agency',
        entity.element: 'AgencyID'
     }]
    AgencyId,
    @Semantics.text: true
    _Agency.Name as AgencyName,
    @ObjectModel.text.element: [ 'CustomerName' ]
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Customer',
        entity.element: 'CustomerID'
     }]
    CustomerId,
    @Semantics.text: true
    _Customer.LastName as CustomerName,
    BeginDate,
    EndDate,
    BookingFee,
    TotalPrice,
    CurrencyCode,
    @Semantics.text: true
    Description,
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Overall_Status_VH',
        entity.element: 'OverallStatus'
     }]
    @ObjectModel.text.element: [ 'StatusText' ]
    OverallStatus,
    CreatedBy,
    CreatedAt,
    LastChangedBy,
    LastChangedAt,
    @Semantics.text: true
    StatusText,
    Criticality,
    /* Associations */
    _Agency,
    _Booking: redirected to composition child ZLAM_AB_BOOKING_PROCESSOR,
    _Currency,
    _Customer,
    _OverallStatus
}


----------------------------------------
5. Booking processor entity

@EndUserText.label: 'My Travel processor projection'
@AccessControl.authorizationCheck: #NOT_REQUIRED
@Metadata.allowExtensions: true
define view entity ZLAM_AB_BOOKING_PROCESSOR as projection on ZLAM_AB_BOOKING
{
    key TravelId,
    key BookingId,
    BookingDate,
    CustomerId,
    CarrierId,
    ConnectionId,
    FlightDate,
    FlightPrice,
    CurrencyCode,
    BookingStatus,
    LastChangedAt,
    /* Associations */
    _BookingStatus,
    _BookingSupplement: redirected to composition child ZLAM_AB_BOOKSUPPL_PROCESSOR,
    _Carrier,
    _Connection,
    _Customer,
    _Travel: redirected to parent ZLAM_AB_TRAVEL_PROCESSOR
}


----------------------------------------
6. Booking Supplement entity
@EndUserText.label: 'My Travel processor projection'
@AccessControl.authorizationCheck: #NOT_REQUIRED
@Metadata.allowExtensions: true
define view entity ZLAM_AB_BOOKSUPPL_PROCESSOR 
    as projection on ZLAM_AB_BOOKSUPPL
{
    key TravelId,
    key BookingId,
    key BookingSupplementId,
    SupplementId,
    Price,
    CurrencyCode,
    LastChangedAt,
    /* Associations */
    _Booking: redirected to parent ZLAM_AB_BOOKING_PROCESSOR,
    _Travel: redirected to ZLAM_AB_TRAVEL_PROCESSOR
}

----------------------------------------
7. Travel MDE

@Metadata.layer: #CUSTOMER
@UI.headerInfo:{ 
    typeName: 'Travel',
    typeNamePlural: 'Travels',
    title: { value: 'TravelId' },
    description: { value: 'CustomerId' }
        
}
annotate view ZLAM_AB_TRAVEL_PROCESSOR
    with 
{
    @UI.facet: [{ 
        id: 'TravelHeaderPrice',
        purpose: #HEADER,
        type: #DATAPOINT_REFERENCE,
        position: 10,
        targetQualifier: 'PriceData'
    },{ 
        id: 'TravelHeaderStatus',
        purpose: #HEADER,
        type: #DATAPOINT_REFERENCE,
        position: 20,
        targetQualifier: 'StatusData'
    },{ 
        id:'GeneralInfo',
        type: #COLLECTION,
        label: 'General Info',
        position: 10
    },{ 
        id:'Travel',
        type: #IDENTIFICATION_REFERENCE,
        purpose: #STANDARD,
        label: 'General Data',
        parentId: 'GeneralInfo',
        position: 10
    },{ 
        id:'Dates',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        label: 'Dates Data',
        parentId: 'GeneralInfo',
        position: 20,
        targetQualifier: 'DatesGroup'
    },{ 
        id:'Prices',
        type: #FIELDGROUP_REFERENCE,
        purpose: #STANDARD,
        label: 'Price Data',
        parentId: 'GeneralInfo',
        position: 30,
        targetQualifier: 'PriceGroup'
    },
                { 
                    purpose: #STANDARD,
                    type: #LINEITEM_REFERENCE,
                    label: 'Bookings',
                    position: 20,
                    targetElement: '_Booking'
                }]

    @UI : { selectionField: [{position: 10 }] ,
            lineItem: [{ position: 10 }],
            identification: [{position: 10 }] }
    TravelId;
    @UI : { selectionField: [{position: 20 }] ,
            lineItem: [{ position: 20 }],
            identification: [{position: 20 }] }
    AgencyId;
    @UI : { selectionField: [{position: 30 }] ,
            lineItem: [{ position: 30 }],
            identification: [{position: 30 }] }
    CustomerId;
    @UI : { selectionField: [{position: 40 }] ,
            lineItem: [{ position: 40 }] }
    @UI.fieldGroup: [{position: 10, qualifier: 'DatesGroup' }]
    BeginDate;
    
    @UI.lineItem: [{ position: 50 }]
    @UI.dataPoint: {  qualifier: 'PriceData', title: 'Price Data' }
    @UI.fieldGroup: [{position: 10, qualifier: 'PriceGroup' }]
    TotalPrice;
    @UI.lineItem: [{ position: 51 }]
    CurrencyCode;
//    @UI.lineItem: [{ position: 11 }]
//    Description;
    @UI.selectionField: [{position: 50 }]
    @UI.lineItem: [{ position: 60, importance: #HIGH, criticality: 'Criticality' }]
    @UI.identification: [{position: 40 }]
    @UI.textArrangement: #TEXT_ONLY
    @UI.dataPoint: {  qualifier: 'StatusData', title: 'Travel Status' }
    OverallStatus;
    
    @UI.lineItem: [{ position: 70 }]
    
//    Lastchangedat;
    
//    Createdby;
//      Createdat;
//    Lastchangedby;
    @UI.fieldGroup: [{position: 20, qualifier: 'DatesGroup' }]
    EndDate;
    @UI.fieldGroup: [{position: 20, qualifier: 'PriceGroup' }]
    BookingFee;
//    /* Associations */
//    _Agency;
//    _Currency;
//    _Customer;

    
}
----------------------------------------
8. Booking MDE
@Metadata.layer: #CORE
@UI.headerInfo:{ 
    typeName: 'Booking',
    typeNamePlural: 'Bookings',
    title: { value: 'BookingId' },
    description: { value: '_Carrier.Name' }
}
annotate view ZLAM_AB_BOOKING_PROCESSOR
    with 
{
    @UI.facet: [
                { 
                    purpose: #STANDARD,
                    type: #IDENTIFICATION_REFERENCE,
                    label: 'Booking Info',
                    position: 10
                 },
                 { 
                    purpose: #STANDARD,
                    type: #LINEITEM_REFERENCE,
                    position: 20,
                    label: 'Supplements',
                    targetElement: '_BookingSupplement'
                 }
    ]
    @UI.lineItem: [{ position: 10 }]
    @UI.identification: [{ position: 10 }]
    BookingId;
    @UI.lineItem: [{ position: 20 }]
    @UI.identification: [{ position: 20 }]
    BookingDate;
    @UI.lineItem: [{ position: 30 }]
    @UI.identification: [{ position: 30 }]
    CustomerId;
    @UI.lineItem: [{ position: 40 }]
    @UI.identification: [{ position: 40 }]
    CarrierId;
    @UI.lineItem: [{ position: 50 }]
    @UI.identification: [{ position: 50 }]
    ConnectionId;
    @UI.lineItem: [{ position: 60 }]
    @UI.identification: [{ position: 60 }]
    FlightDate;
    @UI.lineItem: [{ position: 70 }]
    @UI.identification: [{ position: 70 }]
    FlightPrice;
    @UI.identification: [{ position: 80 }]
    CurrencyCode;
    @UI.lineItem: [{ position: 80 }]
    @UI.identification: [{ position: 90 }]
    BookingStatus;
    @UI.identification: [{ position: 100 }]
    LastChangedAt;    
}
----------------------------------------
9. Booking Supplement MDE
@Metadata.layer: #CORE
@UI.headerInfo:{ 
    typeName: 'Supplement',
    typeNamePlural: 'Supplements',
    title: { value: 'BookingSupplementId' },
    description: { value: 'Price' }
}
annotate view ZLAM_AB_BOOKSUPPL_PROCESSOR
    with 
{
    @UI.facet: [{ 
        purpose: #STANDARD,
        type: #IDENTIFICATION_REFERENCE,
        position: 10,
        label: 'Supplement Info'
     }]
    @UI.lineItem: [{ position: 10 }]
    @UI.identification: [{ position: 10 }]
    BookingSupplementId;
    @UI.lineItem: [{ position: 20 }]
    @UI.identification: [{ position: 20 }]
    SupplementId;
    @UI.lineItem: [{ position: 30 }]
    @UI.identification: [{ position: 30 }]
    Price;
    @UI.lineItem: [{ position: 40 }]
    @UI.identification: [{ position: 40 }]
    CurrencyCode;
    @UI.identification: [{ position: 50 }]
    LastChangedAt;
    
}
----------------------------------------
10. BDefinition for Travel

managed implementation in class zbp_lam_ab_travel unique;
//guideline and best practice for definition to be followed
strict ( 2 );

//define the behavior for root entity
define behavior for ZLAM_AB_TRAVEL alias Travel
//telling the framework to insert data in this db table for travel request
persistent table /dmo/travel_m
//how the RAP should handle the locks - if a travel request is locked
//the other users cannot edit the childs - like its bookings and suppl
lock master
//controls the permissions and security settings for our RAP BO
authorization master ( instance )
//controlling the concurrency
etag master LastChangedAt
{
  field (readonly) TravelId;
  //here are the operations which RAP with generate automatically (manage)
  create;
  update;
  delete;
  //a booking can only be created with travel request
  association _Booking { create; }

  mapping for /dmo/travel_m{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    CreatedAt = created_at;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZLAM_AB_BOOKING alias Booking
//telling the framework to insert data in this db table for booking
persistent table /dmo/booking_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  association _Travel;
  association _BookingSupplement { create; }

  mapping for /dmo/booking_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    BookingStatus = booking_status;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZLAM_AB_BOOKSUPPL alias BookSuppl
//telling the framework to insert data in this db table for booking suppl
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId, BookingSupplementId;
  association _Travel;
  association _Booking;

  mapping for /dmo/booksuppl_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    SupplementId = supplement_id;
    Price = price;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
  }
}
----------------------------------------
11. BDefinition Projection for travel

projection;
strict ( 2 );

define behavior for ZLAM_AB_TRAVEL_PROCESSOR alias Travel
{
  use create;
  use update;
  use delete;

  use association _Booking { create; }
}

define behavior for ZLAM_AB_BOOKING_PROCESSOR alias Booking
{
  use update;
  use delete;

  use association _Travel;
  use association _BookingSupplement { create; }
}

define behavior for ZLAM_AB_BOOKSUPPL_PROCESSOR alias BookingSuppl
{
  use update;
  use delete;

  use association _Travel;
  use association _Booking;
}

12. Service definition
@EndUserText.label: 'ZLAM_AB_SD_PROCESSOR'
define service ZLAM_AB_SD_PROCESSOR {
  expose ZLAM_AB_TRAVEL_PROCESSOR    as Travel;
  expose ZLAM_AB_BOOKING_PROCESSOR   as Booking;
  expose ZLAM_AB_BOOKSUPPL_PROCESSOR as BookSupplement;
  expose /DMO/I_Agency               as Agency;
  expose /DMO/I_Customer             as Customer;
  expose /DMO/I_Carrier              as Carrier;
  expose /DMO/I_Connection           as Connection;
  expose /DMO/I_Overall_Status_VH    as OverallStatus;
  expose /DMO/I_Booking_Status_VH    as BookingStatus;
}